{"ast":null,"code":"const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:3000/api';export const mongoAuthService={// Register user with MongoDB backend\nasync register(email,password,displayName,role,parentEmail){try{const response=await fetch(`${API_BASE_URL}/auth/register`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password,displayName,role,parentEmail})});const data=await response.json();if(!data.success){throw new Error(data.error||'Registration failed');}// Store token in localStorage\nlocalStorage.setItem('auth_token',data.data.token);return data.data;}catch(error){throw error;}},// Login user with MongoDB backend\nasync login(email,password){try{const response=await fetch(`${API_BASE_URL}/auth/login`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();if(!data.success){throw new Error(data.error||'Login failed');}// Store token in localStorage\nlocalStorage.setItem('auth_token',data.data.token);return data.data;}catch(error){throw error;}},// Logout user\nasync logout(){try{localStorage.removeItem('auth_token');}catch(error){throw error;}},// Get current user profile\nasync getProfile(){try{const token=localStorage.getItem('auth_token');if(!token){throw new Error('No authentication token');}const response=await fetch(`${API_BASE_URL}/auth/profile`,{method:'GET',headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'}});const data=await response.json();if(!data.success){throw new Error(data.error||'Failed to get profile');}return data.data.user;}catch(error){throw error;}},// Update user profile\nasync updateProfile(displayName,avatar){try{const token=localStorage.getItem('auth_token');if(!token){throw new Error('No authentication token');}const response=await fetch(`${API_BASE_URL}/auth/profile`,{method:'PUT',headers:{'Authorization':`Bearer ${token}`,'Content-Type':'application/json'},body:JSON.stringify({displayName,avatar})});const data=await response.json();if(!data.success){throw new Error(data.error||'Failed to update profile');}return data.data.user;}catch(error){throw error;}},// Check if user is authenticated\nisAuthenticated(){return!!localStorage.getItem('auth_token');},// Get stored token\ngetToken(){return localStorage.getItem('auth_token');}};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","mongoAuthService","register","email","password","displayName","role","parentEmail","response","fetch","method","headers","body","JSON","stringify","data","json","success","Error","error","localStorage","setItem","token","login","logout","removeItem","getProfile","getItem","user","updateProfile","avatar","isAuthenticated","getToken"],"sources":["/root/projects/SummerVacationPlanning/frontend/src/services/mongoAuth.ts"],"sourcesContent":["import { User, ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\nexport const mongoAuthService = {\n  // Register user with MongoDB backend\n  async register(email: string, password: string, displayName: string, role: 'student' | 'parent', parentEmail?: string): Promise<{ user: User; token: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          displayName,\n          role,\n          parentEmail,\n        }),\n      });\n\n      const data: ApiResponse<{ user: User; token: string }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Registration failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('auth_token', data.data!.token);\n      \n      return data.data!;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Login user with MongoDB backend\n  async login(email: string, password: string): Promise<{ user: User; token: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email, password }),\n      });\n\n      const data: ApiResponse<{ user: User; token: string }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Login failed');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('auth_token', data.data!.token);\n\n      return data.data!;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Logout user\n  async logout(): Promise<void> {\n    try {\n      localStorage.removeItem('auth_token');\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get current user profile\n  async getProfile(): Promise<User> {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        throw new Error('No authentication token');\n      }\n\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data: ApiResponse<{ user: User }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to get profile');\n      }\n\n      return data.data!.user;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Update user profile\n  async updateProfile(displayName?: string, avatar?: string): Promise<User> {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        throw new Error('No authentication token');\n      }\n\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ displayName, avatar }),\n      });\n\n      const data: ApiResponse<{ user: User }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to update profile');\n      }\n\n      return data.data!.user;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('auth_token');\n  },\n\n  // Get stored token\n  getToken(): string | null {\n    return localStorage.getItem('auth_token');\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}