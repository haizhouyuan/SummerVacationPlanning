{"ast":null,"code":"import{ref,uploadBytes,getDownloadURL,deleteObject}from'firebase/storage';import{storage}from'../config/firebase';class UploadService{generateFileName(originalName,userId,taskId){const timestamp=Date.now();const extension=originalName.split('.').pop();return`evidence/${userId}/${taskId}/${timestamp}_${originalName}`;}validateFile(file){// Check file size (max 10MB)\nconst maxSize=10*1024*1024;// 10MB\nif(file.size>maxSize){return{valid:false,error:'文件大小不能超过10MB'};}// Check file type\nconst allowedTypes=[// Images\n'image/jpeg','image/jpg','image/png','image/gif','image/webp',// Videos\n'video/mp4','video/avi','video/mov','video/wmv','video/flv','video/webm',// Audio\n'audio/mp3','audio/wav','audio/aac','audio/ogg'];if(!allowedTypes.includes(file.type)){return{valid:false,error:'不支持的文件类型'};}return{valid:true};}async uploadFile(file,userId,taskId,onProgress){// Validate file\nconst validation=this.validateFile(file);if(!validation.valid){throw new Error(validation.error);}try{// Generate unique file name\nconst fileName=this.generateFileName(file.name,userId,taskId);const storageRef=ref(storage,fileName);// Upload file\nconst snapshot=await uploadBytes(storageRef,file);// Get download URL\nconst downloadURL=await getDownloadURL(snapshot.ref);return{url:downloadURL,path:fileName,type:file.type,size:file.size,name:file.name};}catch(error){console.error('Upload error:',error);throw new Error('文件上传失败，请重试');}}async uploadMultipleFiles(files,userId,taskId,onProgress){const results=[];for(let i=0;i<files.length;i++){const file=files[i];try{const result=await this.uploadFile(file,userId,taskId,onProgress?progress=>onProgress(i,progress):undefined);results.push(result);}catch(error){console.error(`Error uploading file ${file.name}:`,error);throw error;}}return results;}async deleteFile(filePath){try{const storageRef=ref(storage,filePath);await deleteObject(storageRef);}catch(error){console.error('Delete error:',error);throw new Error('文件删除失败');}}getFileType(fileName){var _fileName$split$pop;const extension=((_fileName$split$pop=fileName.split('.').pop())===null||_fileName$split$pop===void 0?void 0:_fileName$split$pop.toLowerCase())||'';const imageExts=['jpg','jpeg','png','gif','webp'];const videoExts=['mp4','avi','mov','wmv','flv','webm'];const audioExts=['mp3','wav','aac','ogg'];if(imageExts.includes(extension))return'image';if(videoExts.includes(extension))return'video';if(audioExts.includes(extension))return'audio';return'unknown';}formatFileSize(bytes){if(bytes===0)return'0 B';const k=1024;const sizes=['B','KB','MB','GB'];const i=Math.floor(Math.log(bytes)/Math.log(k));return parseFloat((bytes/Math.pow(k,i)).toFixed(2))+' '+sizes[i];}}export const uploadService=new UploadService();","map":{"version":3,"names":["ref","uploadBytes","getDownloadURL","deleteObject","storage","UploadService","generateFileName","originalName","userId","taskId","timestamp","Date","now","extension","split","pop","validateFile","file","maxSize","size","valid","error","allowedTypes","includes","type","uploadFile","onProgress","validation","Error","fileName","name","storageRef","snapshot","downloadURL","url","path","console","uploadMultipleFiles","files","results","i","length","result","progress","undefined","push","deleteFile","filePath","getFileType","_fileName$split$pop","toLowerCase","imageExts","videoExts","audioExts","formatFileSize","bytes","k","sizes","Math","floor","log","parseFloat","pow","toFixed","uploadService"],"sources":["/root/projects/SummerVacationPlanning/frontend/src/services/upload.ts"],"sourcesContent":["import { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\nimport { storage } from '../config/firebase';\n\nexport interface UploadProgress {\n  bytesTransferred: number;\n  totalBytes: number;\n  progress: number;\n}\n\nexport interface UploadResult {\n  url: string;\n  path: string;\n  type: string;\n  size: number;\n  name: string;\n}\n\nclass UploadService {\n  private generateFileName(originalName: string, userId: string, taskId: string): string {\n    const timestamp = Date.now();\n    const extension = originalName.split('.').pop();\n    return `evidence/${userId}/${taskId}/${timestamp}_${originalName}`;\n  }\n\n  private validateFile(file: File): { valid: boolean; error?: string } {\n    // Check file size (max 10MB)\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxSize) {\n      return { valid: false, error: '文件大小不能超过10MB' };\n    }\n\n    // Check file type\n    const allowedTypes = [\n      // Images\n      'image/jpeg',\n      'image/jpg',\n      'image/png',\n      'image/gif',\n      'image/webp',\n      // Videos\n      'video/mp4',\n      'video/avi',\n      'video/mov',\n      'video/wmv',\n      'video/flv',\n      'video/webm',\n      // Audio\n      'audio/mp3',\n      'audio/wav',\n      'audio/aac',\n      'audio/ogg',\n    ];\n\n    if (!allowedTypes.includes(file.type)) {\n      return { valid: false, error: '不支持的文件类型' };\n    }\n\n    return { valid: true };\n  }\n\n  async uploadFile(\n    file: File,\n    userId: string,\n    taskId: string,\n    onProgress?: (progress: UploadProgress) => void\n  ): Promise<UploadResult> {\n    // Validate file\n    const validation = this.validateFile(file);\n    if (!validation.valid) {\n      throw new Error(validation.error);\n    }\n\n    try {\n      // Generate unique file name\n      const fileName = this.generateFileName(file.name, userId, taskId);\n      const storageRef = ref(storage, fileName);\n\n      // Upload file\n      const snapshot = await uploadBytes(storageRef, file);\n\n      // Get download URL\n      const downloadURL = await getDownloadURL(snapshot.ref);\n\n      return {\n        url: downloadURL,\n        path: fileName,\n        type: file.type,\n        size: file.size,\n        name: file.name,\n      };\n    } catch (error) {\n      console.error('Upload error:', error);\n      throw new Error('文件上传失败，请重试');\n    }\n  }\n\n  async uploadMultipleFiles(\n    files: File[],\n    userId: string,\n    taskId: string,\n    onProgress?: (fileIndex: number, progress: UploadProgress) => void\n  ): Promise<UploadResult[]> {\n    const results: UploadResult[] = [];\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      try {\n        const result = await this.uploadFile(\n          file,\n          userId,\n          taskId,\n          onProgress ? (progress) => onProgress(i, progress) : undefined\n        );\n        results.push(result);\n      } catch (error) {\n        console.error(`Error uploading file ${file.name}:`, error);\n        throw error;\n      }\n    }\n\n    return results;\n  }\n\n  async deleteFile(filePath: string): Promise<void> {\n    try {\n      const storageRef = ref(storage, filePath);\n      await deleteObject(storageRef);\n    } catch (error) {\n      console.error('Delete error:', error);\n      throw new Error('文件删除失败');\n    }\n  }\n\n  getFileType(fileName: string): 'image' | 'video' | 'audio' | 'unknown' {\n    const extension = fileName.split('.').pop()?.toLowerCase() || '';\n    \n    const imageExts = ['jpg', 'jpeg', 'png', 'gif', 'webp'];\n    const videoExts = ['mp4', 'avi', 'mov', 'wmv', 'flv', 'webm'];\n    const audioExts = ['mp3', 'wav', 'aac', 'ogg'];\n\n    if (imageExts.includes(extension)) return 'image';\n    if (videoExts.includes(extension)) return 'video';\n    if (audioExts.includes(extension)) return 'audio';\n    return 'unknown';\n  }\n\n  formatFileSize(bytes: number): string {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n}\n\nexport const uploadService = new UploadService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}