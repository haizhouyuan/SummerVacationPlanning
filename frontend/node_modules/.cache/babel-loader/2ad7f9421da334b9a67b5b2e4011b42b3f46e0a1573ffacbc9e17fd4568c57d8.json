{"ast":null,"code":"import{signInWithEmailAndPassword,signOut,onAuthStateChanged}from'firebase/auth';import{auth}from'../config/firebase';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';export const authService={// Register user with backend\nasync register(email,password,displayName,role,parentEmail){try{const response=await fetch(`${API_BASE_URL}/auth/register`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password,displayName,role,parentEmail})});const data=await response.json();if(!data.success){throw new Error(data.error||'Registration failed');}return data.data.user;}catch(error){throw error;}},// Login user with Firebase\nasync login(email,password){try{const userCredential=await signInWithEmailAndPassword(auth,email,password);const idToken=await userCredential.user.getIdToken();const response=await fetch(`${API_BASE_URL}/auth/login`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({idToken})});const data=await response.json();if(!data.success){throw new Error(data.error||'Login failed');}return data.data.user;}catch(error){throw error;}},// Logout user\nasync logout(){try{await signOut(auth);}catch(error){throw error;}},// Get current user profile\nasync getProfile(){try{const currentUser=auth.currentUser;if(!currentUser){throw new Error('No authenticated user');}const idToken=await currentUser.getIdToken();const response=await fetch(`${API_BASE_URL}/auth/profile`,{method:'GET',headers:{'Authorization':`Bearer ${idToken}`,'Content-Type':'application/json'}});const data=await response.json();if(!data.success){throw new Error(data.error||'Failed to get profile');}return data.data.user;}catch(error){throw error;}},// Update user profile\nasync updateProfile(displayName,avatar){try{const currentUser=auth.currentUser;if(!currentUser){throw new Error('No authenticated user');}const idToken=await currentUser.getIdToken();const response=await fetch(`${API_BASE_URL}/auth/profile`,{method:'PUT',headers:{'Authorization':`Bearer ${idToken}`,'Content-Type':'application/json'},body:JSON.stringify({displayName,avatar})});const data=await response.json();if(!data.success){throw new Error(data.error||'Failed to update profile');}return data.data.user;}catch(error){throw error;}},// Listen to auth state changes\nonAuthStateChanged(callback){return onAuthStateChanged(auth,callback);}};","map":{"version":3,"names":["signInWithEmailAndPassword","signOut","onAuthStateChanged","auth","API_BASE_URL","process","env","REACT_APP_API_URL","authService","register","email","password","displayName","role","parentEmail","response","fetch","method","headers","body","JSON","stringify","data","json","success","Error","error","user","login","userCredential","idToken","getIdToken","logout","getProfile","currentUser","updateProfile","avatar","callback"],"sources":["/root/projects/SummerVacationPlanning/frontend/src/services/auth.ts"],"sourcesContent":["import { \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword,\n  signOut,\n  User as FirebaseUser,\n  onAuthStateChanged\n} from 'firebase/auth';\nimport { auth } from '../config/firebase';\nimport { User, ApiResponse } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nexport const authService = {\n  // Register user with backend\n  async register(email: string, password: string, displayName: string, role: 'student' | 'parent', parentEmail?: string): Promise<User> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email,\n          password,\n          displayName,\n          role,\n          parentEmail,\n        }),\n      });\n\n      const data: ApiResponse<{ user: User; token: string }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Registration failed');\n      }\n\n      return data.data!.user;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Login user with Firebase\n  async login(email: string, password: string): Promise<User> {\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const idToken = await userCredential.user.getIdToken();\n\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ idToken }),\n      });\n\n      const data: ApiResponse<{ user: User }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Login failed');\n      }\n\n      return data.data!.user;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Logout user\n  async logout(): Promise<void> {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get current user profile\n  async getProfile(): Promise<User> {\n    try {\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        throw new Error('No authenticated user');\n      }\n\n      const idToken = await currentUser.getIdToken();\n\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${idToken}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      const data: ApiResponse<{ user: User }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to get profile');\n      }\n\n      return data.data!.user;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Update user profile\n  async updateProfile(displayName?: string, avatar?: string): Promise<User> {\n    try {\n      const currentUser = auth.currentUser;\n      if (!currentUser) {\n        throw new Error('No authenticated user');\n      }\n\n      const idToken = await currentUser.getIdToken();\n\n      const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${idToken}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ displayName, avatar }),\n      });\n\n      const data: ApiResponse<{ user: User }> = await response.json();\n\n      if (!data.success) {\n        throw new Error(data.error || 'Failed to update profile');\n      }\n\n      return data.data!.user;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Listen to auth state changes\n  onAuthStateChanged(callback: (user: FirebaseUser | null) => void) {\n    return onAuthStateChanged(auth, callback);\n  },\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}