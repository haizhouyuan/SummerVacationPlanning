import { Request, Response } from 'express';
import { collections } from '../config/mongodb';
import { User } from '../types';
import { AuthRequest } from '../middleware/auth';

export const register = async (req: Request, res: Response) => {
  try {
    const { email, password, displayName, role, parentEmail } = req.body;

    // Validate required fields
    if (!email || !password || !displayName || !role) {
      return res.status(400).json({
        success: false,
        error: 'Email, password, display name, and role are required',
      });
    }

    if (!['student', 'parent'].includes(role)) {
      return res.status(400).json({
        success: false,
        error: 'Role must be either student or parent',
      });
    }

    // Create Firebase user
    const userRecord = await auth.createUser({
      email,
      password,
      displayName,
    });

    let parentId: string | undefined;
    let parentDoc: any = null;

    // If registering a student, find the parent
    if (role === 'student') {
      if (!parentEmail) {
        return res.status(400).json({
          success: false,
          error: 'Parent email is required for student registration',
        });
      }

      // Find parent by email
      const parentQuery = await collections.users
        .where('email', '==', parentEmail)
        .where('role', '==', 'parent')
        .get();

      if (parentQuery.empty) {
        await auth.deleteUser(userRecord.uid);
        return res.status(404).json({
          success: false,
          error: 'Parent not found with the provided email',
        });
      }

      parentDoc = parentQuery.docs[0];
      parentId = parentDoc.id;
    }

    // Create user document in Firestore
    const userData: Omit<User, 'id'> = {
      email,
      displayName,
      role: role as 'student' | 'parent',
      parentId,
      children: role === 'parent' ? [] : undefined,
      points: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    await collections.users.doc(userRecord.uid).set(userData);

    // If student, update parent's children array
    if (role === 'student' && parentDoc) {
      const parentData = parentDoc.data();
      const updatedChildren = [...(parentData.children || []), userRecord.uid];
      
      await collections.users.doc(parentDoc.id).update({
        children: updatedChildren,
        updatedAt: new Date(),
      });
    }

    // Generate custom token
    const customToken = await auth.createCustomToken(userRecord.uid);

    res.status(201).json({
      success: true,
      data: {
        user: { ...userData, id: userRecord.uid },
        token: customToken,
      },
      message: 'User registered successfully',
    });
  } catch (error: any) {
    console.error('Registration error:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Registration failed',
    });
  }
};

export const login = async (req: Request, res: Response) => {
  try {
    const { idToken } = req.body;

    if (!idToken) {
      return res.status(400).json({
        success: false,
        error: 'ID token is required',
      });
    }

    // Verify the ID token
    const decodedToken = await auth.verifyIdToken(idToken);
    const uid = decodedToken.uid;

    // Get user data from Firestore
    const userDoc = await collections.users.doc(uid).get();

    if (!userDoc.exists) {
      return res.status(404).json({
        success: false,
        error: 'User not found',
      });
    }

    const userData = userDoc.data() as User;
    
    res.status(200).json({
      success: true,
      data: {
        user: { ...userData, id: uid },
      },
      message: 'Login successful',
    });
  } catch (error: any) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Login failed',
    });
  }
};

export const getProfile = async (req: AuthRequest, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'User not authenticated',
      });
    }

    res.status(200).json({
      success: true,
      data: {
        user: req.user,
      },
    });
  } catch (error: any) {
    console.error('Get profile error:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to get profile',
    });
  }
};

export const updateProfile = async (req: AuthRequest, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'User not authenticated',
      });
    }

    const { displayName, avatar } = req.body;
    const updates: any = { updatedAt: new Date() };

    if (displayName) updates.displayName = displayName;
    if (avatar) updates.avatar = avatar;

    await collections.users.doc(req.user.id).update(updates);

    // Get updated user data
    const updatedUserDoc = await collections.users.doc(req.user.id).get();
    const updatedUser = { ...updatedUserDoc.data(), id: req.user.id } as User;

    res.status(200).json({
      success: true,
      data: {
        user: updatedUser,
      },
      message: 'Profile updated successfully',
    });
  } catch (error: any) {
    console.error('Update profile error:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to update profile',
    });
  }
};